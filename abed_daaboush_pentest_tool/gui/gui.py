# gui.py
# هذا الملف يحتوي على كود الواجهة الرسومية.

import sys
import os
import threading
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget, QWidget, 
                             QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, 
                             QPushButton, QTextEdit, QGroupBox, QFileDialog,
                             QMessageBox, QProgressBar, QComboBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QFont, QIcon

# إضافة مسار المشروع إلى sys.path للوصول للوحدات الأخرى
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.core import (scan_sql_injection, scan_network, scan_web, 
                       gather_dns_info, gather_ip_info, perform_brute_force)
from config import (WINDOW_TITLE, WINDOW_WIDTH, WINDOW_HEIGHT, 
                    COLOR_PRIMARY, COLOR_SECONDARY, COLOR_TEXT, COLOR_ERROR)

class ScanThread(QThread):
    """
    فئة لتنفيذ عمليات الفحص في خيط منفصل لتجنب تجميد الواجهة.
    """
    finished = pyqtSignal(str)  # إشارة لإرسال النتائج عند الانتهاء
    
    def __init__(self, scan_function, *args):
        super().__init__()
        self.scan_function = scan_function
        self.args = args
    
    def run(self):
        """
        تنفيذ عملية الفحص في خيط منفصل.
        """
        try:
            result = self.scan_function(*self.args)
            self.finished.emit(result)
        except Exception as e:
            self.finished.emit(f"خطأ: {str(e)}")

class PentestTool(QMainWindow):
    """
    الفئة الرئيسية لواجهة أداة اختبار الاختراق.
    """
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
    def init_ui(self):
        """
        إعداد واجهة المستخدم الرئيسية.
        """
        # إعداد النافذة الرئيسية
        self.setWindowTitle(WINDOW_TITLE)
        self.setGeometry(100, 100, WINDOW_WIDTH, WINDOW_HEIGHT)
        
        # إعداد الخط العربي
        font = QFont("Arial", 10)
        self.setFont(font)
        
        # إنشاء التبويبات الرئيسية
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        
        # إنشاء التبويبات
        self.create_sql_injection_tab()
        self.create_network_scan_tab()
        self.create_web_scan_tab()
        self.create_dns_ip_tab()
        self.create_brute_force_tab()
        self.create_report_tab()
        
        # تطبيق الأنماط (Styles)
        self.apply_styles()
        
    def create_sql_injection_tab(self):
        """
        إنشاء تبويب فحص SQL Injection.
        """
        tab = QWidget()
        layout = QVBoxLayout()
        
        # مجموعة إدخال البيانات
        input_group = QGroupBox("إعدادات فحص SQL Injection")
        input_layout = QVBoxLayout()
        
        # حقل إدخال URL
        url_layout = QHBoxLayout()
        url_layout.addWidget(QLabel("رابط الهدف:"))
        self.sql_url_input = QLineEdit()
        self.sql_url_input.setPlaceholderText("http://example.com/page.php?id=1")
        url_layout.addWidget(self.sql_url_input)
        input_layout.addLayout(url_layout)
        
        # زر بدء الفحص
        self.sql_scan_btn = QPushButton("بدء فحص SQL Injection")
        self.sql_scan_btn.clicked.connect(self.start_sql_scan)
        input_layout.addWidget(self.sql_scan_btn)
        
        input_group.setLayout(input_layout)
        layout.addWidget(input_group)
        
        # منطقة عرض النتائج
        results_group = QGroupBox("نتائج الفحص")
        results_layout = QVBoxLayout()
        
        self.sql_results = QTextEdit()
        self.sql_results.setReadOnly(True)
        results_layout.addWidget(self.sql_results)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "فحص SQL Injection")
        
    def create_network_scan_tab(self):
        """
        إنشاء تبويب فحص الشبكة.
        """
        tab = QWidget()
        layout = QVBoxLayout()
        
        # مجموعة إدخال البيانات
        input_group = QGroupBox("إعدادات فحص الشبكة")
        input_layout = QVBoxLayout()
        
        # حقل إدخال نطاق IP
        ip_layout = QHBoxLayout()
        ip_layout.addWidget(QLabel("نطاق IP:"))
        self.network_ip_input = QLineEdit()
        self.network_ip_input.setPlaceholderText("192.168.1.0/24")
        ip_layout.addWidget(self.network_ip_input)
        input_layout.addLayout(ip_layout)
        
        # زر بدء الفحص
        self.network_scan_btn = QPushButton("بدء فحص الشبكة")
        self.network_scan_btn.clicked.connect(self.start_network_scan)
        input_layout.addWidget(self.network_scan_btn)
        
        input_group.setLayout(input_layout)
        layout.addWidget(input_group)
        
        # منطقة عرض النتائج
        results_group = QGroupBox("نتائج الفحص")
        results_layout = QVBoxLayout()
        
        self.network_results = QTextEdit()
        self.network_results.setReadOnly(True)
        results_layout.addWidget(self.network_results)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "فحص الشبكة")
        
    def create_web_scan_tab(self):
        """
        إنشاء تبويب فحص الويب.
        """
        tab = QWidget()
        layout = QVBoxLayout()
        
        # مجموعة إدخال البيانات
        input_group = QGroupBox("إعدادات فحص الويب")
        input_layout = QVBoxLayout()
        
        # حقل إدخال URL
        url_layout = QHBoxLayout()
        url_layout.addWidget(QLabel("رابط الموقع:"))
        self.web_url_input = QLineEdit()
        self.web_url_input.setPlaceholderText("http://example.com")
        url_layout.addWidget(self.web_url_input)
        input_layout.addLayout(url_layout)
        
        # زر بدء الفحص
        self.web_scan_btn = QPushButton("بدء فحص الويب")
        self.web_scan_btn.clicked.connect(self.start_web_scan)
        input_layout.addWidget(self.web_scan_btn)
        
        input_group.setLayout(input_layout)
        layout.addWidget(input_group)
        
        # منطقة عرض النتائج
        results_group = QGroupBox("نتائج الفحص")
        results_layout = QVBoxLayout()
        
        self.web_results = QTextEdit()
        self.web_results.setReadOnly(True)
        results_layout.addWidget(self.web_results)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "فحص الويب")
        
    def create_dns_ip_tab(self):
        """
        إنشاء تبويب جمع معلومات DNS و IP.
        """
        tab = QWidget()
        layout = QVBoxLayout()
        
        # مجموعة إدخال البيانات
        input_group = QGroupBox("إعدادات جمع المعلومات")
        input_layout = QVBoxLayout()
        
        # اختيار نوع الفحص
        type_layout = QHBoxLayout()
        type_layout.addWidget(QLabel("نوع الفحص:"))
        self.info_type_combo = QComboBox()
        self.info_type_combo.addItems(["DNS", "IP"])
        type_layout.addWidget(self.info_type_combo)
        input_layout.addLayout(type_layout)
        
        # حقل إدخال الهدف
        target_layout = QHBoxLayout()
        target_layout.addWidget(QLabel("الهدف:"))
        self.info_target_input = QLineEdit()
        self.info_target_input.setPlaceholderText("example.com أو 192.168.1.1")
        target_layout.addWidget(self.info_target_input)
        input_layout.addLayout(target_layout)
        
        # زر بدء جمع المعلومات
        self.info_gather_btn = QPushButton("بدء جمع المعلومات")
        self.info_gather_btn.clicked.connect(self.start_info_gathering)
        input_layout.addWidget(self.info_gather_btn)
        
        input_group.setLayout(input_layout)
        layout.addWidget(input_group)
        
        # منطقة عرض النتائج
        results_group = QGroupBox("نتائج جمع المعلومات")
        results_layout = QVBoxLayout()
        
        self.info_results = QTextEdit()
        self.info_results.setReadOnly(True)
        results_layout.addWidget(self.info_results)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "جمع معلومات DNS/IP")
        
    def create_brute_force_tab(self):
        """
        إنشاء تبويب هجوم Brute Force.
        """
        tab = QWidget()
        layout = QVBoxLayout()
        
        # مجموعة إدخال البيانات
        input_group = QGroupBox("إعدادات هجوم Brute Force")
        input_layout = QVBoxLayout()
        
        # حقل إدخال الهدف
        target_layout = QHBoxLayout()
        target_layout.addWidget(QLabel("الهدف:"))
        self.bf_target_input = QLineEdit()
        self.bf_target_input.setPlaceholderText("192.168.1.1")
        target_layout.addWidget(self.bf_target_input)
        input_layout.addLayout(target_layout)
        
        # اختيار الخدمة
        service_layout = QHBoxLayout()
        service_layout.addWidget(QLabel("الخدمة:"))
        self.bf_service_combo = QComboBox()
        self.bf_service_combo.addItems(["ssh", "ftp", "telnet", "http-get", "http-post"])
        service_layout.addWidget(self.bf_service_combo)
        input_layout.addLayout(service_layout)
        
        # ملف أسماء المستخدمين
        username_layout = QHBoxLayout()
        username_layout.addWidget(QLabel("ملف أسماء المستخدمين:"))
        self.bf_username_input = QLineEdit()
        username_layout.addWidget(self.bf_username_input)
        self.bf_username_btn = QPushButton("تصفح")
        self.bf_username_btn.clicked.connect(self.browse_username_file)
        username_layout.addWidget(self.bf_username_btn)
        input_layout.addLayout(username_layout)
        
        # ملف كلمات المرور
        password_layout = QHBoxLayout()
        password_layout.addWidget(QLabel("ملف كلمات المرور:"))
        self.bf_password_input = QLineEdit()
        password_layout.addWidget(self.bf_password_input)
        self.bf_password_btn = QPushButton("تصفح")
        self.bf_password_btn.clicked.connect(self.browse_password_file)
        password_layout.addWidget(self.bf_password_btn)
        input_layout.addLayout(password_layout)
        
        # زر بدء الهجوم
        self.bf_attack_btn = QPushButton("بدء هجوم Brute Force")
        self.bf_attack_btn.clicked.connect(self.start_brute_force)
        input_layout.addWidget(self.bf_attack_btn)
        
        input_group.setLayout(input_layout)
        layout.addWidget(input_group)
        
        # منطقة عرض النتائج
        results_group = QGroupBox("نتائج الهجوم")
        results_layout = QVBoxLayout()
        
        self.bf_results = QTextEdit()
        self.bf_results.setReadOnly(True)
        results_layout.addWidget(self.bf_results)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "هجوم Brute Force")
        
    def create_report_tab(self):
        """
        إنشاء تبويب التقارير.
        """
        tab = QWidget()
        layout = QVBoxLayout()
        
        # مجموعة إعدادات التقرير
        report_group = QGroupBox("إعدادات التقرير")
        report_layout = QVBoxLayout()
        
        # زر توليد التقرير
        self.generate_report_btn = QPushButton("توليد تقرير PDF")
        self.generate_report_btn.clicked.connect(self.generate_report)
        report_layout.addWidget(self.generate_report_btn)
        
        # زر تحليل بالذكاء الاصطناعي
        self.ai_analysis_btn = QPushButton("تحليل بالذكاء الاصطناعي")
        self.ai_analysis_btn.clicked.connect(self.ai_analysis)
        report_layout.addWidget(self.ai_analysis_btn)
        
        report_group.setLayout(report_layout)
        layout.addWidget(report_group)
        
        # منطقة عرض التحليل
        analysis_group = QGroupBox("نتائج التحليل")
        analysis_layout = QVBoxLayout()
        
        self.analysis_results = QTextEdit()
        self.analysis_results.setReadOnly(True)
        analysis_layout.addWidget(self.analysis_results)
        
        analysis_group.setLayout(analysis_layout)
        layout.addWidget(analysis_group)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "التقارير والتحليل")
        
    def apply_styles(self):
        """
        تطبيق الأنماط على الواجهة.
        """
        style = f"""
        QMainWindow {{
            background-color: {COLOR_PRIMARY};
            color: {COLOR_TEXT};
        }}
        QTabWidget::pane {{
            border: 1px solid {COLOR_SECONDARY};
            background-color: {COLOR_PRIMARY};
        }}
        QTabBar::tab {{
            background-color: {COLOR_SECONDARY};
            color: {COLOR_TEXT};
            padding: 8px 16px;
            margin: 2px;
        }}
        QTabBar::tab:selected {{
            background-color: {COLOR_TEXT};
            color: {COLOR_PRIMARY};
        }}
        QPushButton {{
            background-color: {COLOR_SECONDARY};
            color: {COLOR_TEXT};
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
        }}
        QPushButton:hover {{
            background-color: {COLOR_TEXT};
            color: {COLOR_PRIMARY};
        }}
        QLineEdit {{
            background-color: {COLOR_TEXT};
            color: {COLOR_PRIMARY};
            border: 1px solid {COLOR_SECONDARY};
            padding: 4px;
            border-radius: 4px;
        }}
        QTextEdit {{
            background-color: {COLOR_TEXT};
            color: {COLOR_PRIMARY};
            border: 1px solid {COLOR_SECONDARY};
            border-radius: 4px;
        }}
        QGroupBox {{
            color: {COLOR_TEXT};
            font-weight: bold;
            border: 2px solid {COLOR_SECONDARY};
            border-radius: 4px;
            margin: 10px 0px;
            padding-top: 10px;
        }}
        QGroupBox::title {{
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
        }}
        QLabel {{
            color: {COLOR_TEXT};
        }}
        QComboBox {{
            background-color: {COLOR_TEXT};
            color: {COLOR_PRIMARY};
            border: 1px solid {COLOR_SECONDARY};
            padding: 4px;
            border-radius: 4px;
        }}
        """
        self.setStyleSheet(style)
        
    def start_sql_scan(self):
        """
        بدء فحص SQL Injection.
        """
        url = self.sql_url_input.text().strip()
        if not url:
            QMessageBox.warning(self, "تحذير", "يرجى إدخال رابط الهدف")
            return
            
        self.sql_results.clear()
        self.sql_results.append("جاري فحص SQL Injection...")
        self.sql_scan_btn.setEnabled(False)
        
        # تنفيذ الفحص في خيط منفصل
        self.sql_thread = ScanThread(scan_sql_injection, url)
        self.sql_thread.finished.connect(self.on_sql_scan_finished)
        self.sql_thread.start()
        
    def on_sql_scan_finished(self, result):
        """
        معالجة انتهاء فحص SQL Injection.
        """
        self.sql_results.clear()
        self.sql_results.append(result)
        self.sql_scan_btn.setEnabled(True)
        
    def start_network_scan(self):
        """
        بدء فحص الشبكة.
        """
        ip_range = self.network_ip_input.text().strip()
        if not ip_range:
            QMessageBox.warning(self, "تحذير", "يرجى إدخال نطاق IP")
            return
            
        self.network_results.clear()
        self.network_results.append("جاري فحص الشبكة...")
        self.network_scan_btn.setEnabled(False)
        
        # تنفيذ الفحص في خيط منفصل
        self.network_thread = ScanThread(scan_network, ip_range)
        self.network_thread.finished.connect(self.on_network_scan_finished)
        self.network_thread.start()
        
    def on_network_scan_finished(self, result):
        """
        معالجة انتهاء فحص الشبكة.
        """
        self.network_results.clear()
        self.network_results.append(result)
        self.network_scan_btn.setEnabled(True)
        
    def start_web_scan(self):
        """
        بدء فحص الويب.
        """
        url = self.web_url_input.text().strip()
        if not url:
            QMessageBox.warning(self, "تحذير", "يرجى إدخال رابط الموقع")
            return
            
        self.web_results.clear()
        self.web_results.append("جاري فحص الويب...")
        self.web_scan_btn.setEnabled(False)
        
        # تنفيذ الفحص في خيط منفصل
        self.web_thread = ScanThread(scan_web, url)
        self.web_thread.finished.connect(self.on_web_scan_finished)
        self.web_thread.start()
        
    def on_web_scan_finished(self, result):
        """
        معالجة انتهاء فحص الويب.
        """
        self.web_results.clear()
        self.web_results.append(result)
        self.web_scan_btn.setEnabled(True)
        
    def start_info_gathering(self):
        """
        بدء جمع معلومات DNS/IP.
        """
        target = self.info_target_input.text().strip()
        info_type = self.info_type_combo.currentText()
        
        if not target:
            QMessageBox.warning(self, "تحذير", "يرجى إدخال الهدف")
            return
            
        self.info_results.clear()
        self.info_results.append(f"جاري جمع معلومات {info_type}...")
        self.info_gather_btn.setEnabled(False)
        
        # اختيار الدالة المناسبة حسب نوع الفحص
        if info_type == "DNS":
            scan_function = gather_dns_info
        else:
            scan_function = gather_ip_info
            
        # تنفيذ جمع المعلومات في خيط منفصل
        self.info_thread = ScanThread(scan_function, target)
        self.info_thread.finished.connect(self.on_info_gathering_finished)
        self.info_thread.start()
        
    def on_info_gathering_finished(self, result):
        """
        معالجة انتهاء جمع المعلومات.
        """
        self.info_results.clear()
        self.info_results.append(result)
        self.info_gather_btn.setEnabled(True)
        
    def browse_username_file(self):
        """
        تصفح ملف أسماء المستخدمين.
        """
        file_path, _ = QFileDialog.getOpenFileName(self, "اختر ملف أسماء المستخدمين", "", "Text Files (*.txt)")
        if file_path:
            self.bf_username_input.setText(file_path)
            
    def browse_password_file(self):
        """
        تصفح ملف كلمات المرور.
        """
        file_path, _ = QFileDialog.getOpenFileName(self, "اختر ملف كلمات المرور", "", "Text Files (*.txt)")
        if file_path:
            self.bf_password_input.setText(file_path)
            
    def start_brute_force(self):
        """
        بدء هجوم Brute Force.
        """
        target = self.bf_target_input.text().strip()
        service = self.bf_service_combo.currentText()
        username_file = self.bf_username_input.text().strip()
        password_file = self.bf_password_input.text().strip()
        
        if not all([target, username_file, password_file]):
            QMessageBox.warning(self, "تحذير", "يرجى ملء جميع الحقول")
            return
            
        self.bf_results.clear()
        self.bf_results.append("جاري تنفيذ هجوم Brute Force...")
        self.bf_attack_btn.setEnabled(False)
        
        # تنفيذ الهجوم في خيط منفصل
        self.bf_thread = ScanThread(perform_brute_force, target, username_file, password_file, service)
        self.bf_thread.finished.connect(self.on_brute_force_finished)
        self.bf_thread.start()
        
    def on_brute_force_finished(self, result):
        """
        معالجة انتهاء هجوم Brute Force.
        """
        self.bf_results.clear()
        self.bf_results.append(result)
        self.bf_attack_btn.setEnabled(True)
        
    def generate_report(self):
        """
        توليد تقرير PDF.
        """
        # هذه الدالة ستستدعي وحدة التقارير
        # سيتم تطويرها في المرحلة التالية
        QMessageBox.information(self, "معلومات", "سيتم تطوير وظيفة توليد التقارير في المرحلة التالية")
        
    def ai_analysis(self):
        """
        تحليل بالذكاء الاصطناعي.
        """
        # هذه الدالة ستستدعي وحدة الذكاء الاصطناعي
        # سيتم تطويرها في المرحلة التالية
        QMessageBox.information(self, "معلومات", "سيتم تطوير وظيفة التحليل بالذكاء الاصطناعي في المرحلة التالية")

def main():
    """
    الدالة الرئيسية لتشغيل التطبيق.
    """
    app = QApplication(sys.argv)
    
    # تعيين اتجاه النص من اليمين إلى اليسار للعربية
    app.setLayoutDirection(Qt.RightToLeft)
    
    # إنشاء النافذة الرئيسية
    window = PentestTool()
    window.show()
    
    # تشغيل التطبيق
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()

