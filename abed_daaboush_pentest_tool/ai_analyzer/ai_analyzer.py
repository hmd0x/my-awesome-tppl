# ai_analyzer.py
# هذا الملف يحتوي على وظائف تحليل الذكاء الاصطناعي.

import os
import openai
from config import AI_MODEL_NAME, AI_API_KEY

class AIVulnerabilityAnalyzer:
    """
    فئة لتحليل نتائج اختبار الاختراق باستخدام الذكاء الاصطناعي.
    """
    
    def __init__(self):
        """
        إعداد محلل الذكاء الاصطناعي.
        """
        # إعداد مفتاح API (يفضل استخدام متغيرات البيئة)
        openai.api_key = os.getenv('OPENAI_API_KEY', AI_API_KEY)
        
    def analyze_scan_results(self, scan_results):
        """
        تحليل نتائج الفحص وتقديم توصيات ذكية.
        
        Args:
            scan_results (dict): قاموس يحتوي على نتائج جميع أنواع الفحص
            
        Returns:
            str: تحليل مفصل مع التوصيات
        """
        try:
            # إعداد النص للتحليل
            analysis_prompt = self._prepare_analysis_prompt(scan_results)
            
            # استدعاء API الذكاء الاصطناعي
            response = openai.ChatCompletion.create(
                model=AI_MODEL_NAME,
                messages=[
                    {
                        "role": "system", 
                        "content": "أنت خبير أمان سيبراني متخصص في تحليل نتائج اختبار الاختراق. قم بتحليل النتائج المقدمة وقدم توصيات مفصلة باللغة العربية."
                    },
                    {
                        "role": "user", 
                        "content": analysis_prompt
                    }
                ],
                max_tokens=1500,
                temperature=0.7
            )
            
            analysis = response.choices[0].message.content
            return analysis
            
        except Exception as e:
            return f"خطأ في تحليل الذكاء الاصطناعي: {str(e)}"
    
    def _prepare_analysis_prompt(self, scan_results):
        """
        إعداد النص المطلوب لتحليل الذكاء الاصطناعي.
        
        Args:
            scan_results (dict): نتائج الفحص
            
        Returns:
            str: النص المُعد للتحليل
        """
        prompt = "يرجى تحليل نتائج اختبار الاختراق التالية وتقديم توصيات مفصلة:\n\n"
        
        if 'sql_injection' in scan_results:
            prompt += f"نتائج فحص SQL Injection:\n{scan_results['sql_injection']}\n\n"
            
        if 'network_scan' in scan_results:
            prompt += f"نتائج فحص الشبكة:\n{scan_results['network_scan']}\n\n"
            
        if 'web_scan' in scan_results:
            prompt += f"نتائج فحص الويب:\n{scan_results['web_scan']}\n\n"
            
        if 'dns_info' in scan_results:
            prompt += f"معلومات DNS:\n{scan_results['dns_info']}\n\n"
            
        if 'ip_info' in scan_results:
            prompt += f"معلومات IP:\n{scan_results['ip_info']}\n\n"
            
        if 'brute_force' in scan_results:
            prompt += f"نتائج هجوم Brute Force:\n{scan_results['brute_force']}\n\n"
        
        prompt += """
        يرجى تقديم تحليل شامل يتضمن:
        1. تقييم مستوى الخطر العام
        2. الثغرات المكتشفة وتصنيفها حسب الأولوية
        3. التوصيات المحددة لكل ثغرة
        4. خطة عمل مقترحة لتحسين الأمان
        5. أفضل الممارسات للوقاية المستقبلية
        """
        
        return prompt
    
    def analyze_vulnerability_severity(self, vulnerability_description):
        """
        تحليل شدة الثغرة الأمنية.
        
        Args:
            vulnerability_description (str): وصف الثغرة
            
        Returns:
            dict: تقييم شدة الثغرة مع التوصيات
        """
        try:
            prompt = f"""
            قم بتحليل الثغرة الأمنية التالية وتقييم شدتها:
            
            {vulnerability_description}
            
            يرجى تقديم:
            1. مستوى الخطر (منخفض/متوسط/عالي/حرج)
            2. التأثير المحتمل
            3. سهولة الاستغلال
            4. التوصيات الفورية
            5. الخطوات التفصيلية للإصلاح
            """
            
            response = openai.ChatCompletion.create(
                model=AI_MODEL_NAME,
                messages=[
                    {
                        "role": "system", 
                        "content": "أنت خبير أمان سيبراني متخصص في تقييم الثغرات الأمنية. قدم تحليلاً دقيقاً ومفصلاً باللغة العربية."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=1000,
                temperature=0.5
            )
            
            analysis = response.choices[0].message.content
            
            # استخراج مستوى الخطر من التحليل
            risk_level = self._extract_risk_level(analysis)
            
            return {
                'analysis': analysis,
                'risk_level': risk_level,
                'timestamp': os.popen('date').read().strip()
            }
            
        except Exception as e:
            return {
                'analysis': f"خطأ في تحليل الثغرة: {str(e)}",
                'risk_level': 'غير محدد',
                'timestamp': os.popen('date').read().strip()
            }
    
    def _extract_risk_level(self, analysis_text):
        """
        استخراج مستوى الخطر من نص التحليل.
        
        Args:
            analysis_text (str): نص التحليل
            
        Returns:
            str: مستوى الخطر
        """
        analysis_lower = analysis_text.lower()
        
        if 'حرج' in analysis_lower or 'critical' in analysis_lower:
            return 'حرج'
        elif 'عالي' in analysis_lower or 'high' in analysis_lower:
            return 'عالي'
        elif 'متوسط' in analysis_lower or 'medium' in analysis_lower:
            return 'متوسط'
        elif 'منخفض' in analysis_lower or 'low' in analysis_lower:
            return 'منخفض'
        else:
            return 'غير محدد'
    
    def generate_security_recommendations(self, target_type):
        """
        توليد توصيات أمنية عامة حسب نوع الهدف.
        
        Args:
            target_type (str): نوع الهدف (web, network, database, etc.)
            
        Returns:
            str: توصيات أمنية مخصصة
        """
        try:
            prompt = f"""
            قم بتوليد توصيات أمنية شاملة لحماية {target_type} من الهجمات السيبرانية.
            
            يرجى تضمين:
            1. إعدادات الأمان الأساسية
            2. أفضل الممارسات
            3. أدوات المراقبة المقترحة
            4. سياسات الأمان
            5. خطة الاستجابة للحوادث
            """
            
            response = openai.ChatCompletion.create(
                model=AI_MODEL_NAME,
                messages=[
                    {
                        "role": "system", 
                        "content": "أنت استشاري أمان سيبراني خبير. قدم توصيات عملية وقابلة للتطبيق باللغة العربية."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=1200,
                temperature=0.6
            )
            
            recommendations = response.choices[0].message.content
            return recommendations
            
        except Exception as e:
            return f"خطأ في توليد التوصيات: {str(e)}"
    
    def predict_attack_vectors(self, scan_results):
        """
        التنبؤ بمسارات الهجوم المحتملة بناءً على نتائج الفحص.
        
        Args:
            scan_results (dict): نتائج الفحص
            
        Returns:
            str: تحليل مسارات الهجوم المحتملة
        """
        try:
            prompt = f"""
            بناءً على نتائج الفحص التالية، قم بالتنبؤ بمسارات الهجوم المحتملة:
            
            {str(scan_results)}
            
            يرجى تحليل:
            1. نقاط الدخول المحتملة
            2. تسلسل الهجمات المتوقع
            3. الأهداف النهائية للمهاجمين
            4. سيناريوهات الهجوم المختلفة
            5. استراتيجيات الدفاع المقترحة
            """
            
            response = openai.ChatCompletion.create(
                model=AI_MODEL_NAME,
                messages=[
                    {
                        "role": "system", 
                        "content": "أنت محلل تهديدات سيبرانية متخصص في التنبؤ بسلوك المهاجمين. قدم تحليلاً استراتيجياً باللغة العربية."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=1300,
                temperature=0.7
            )
            
            prediction = response.choices[0].message.content
            return prediction
            
        except Exception as e:
            return f"خطأ في التنبؤ بمسارات الهجوم: {str(e)}"

