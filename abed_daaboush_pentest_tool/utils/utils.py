
# utils.py
# هذا الملف يحتوي على دوال مساعدة.



# utils.py
# هذا الملف يحتوي على دوال مساعدة.

import subprocess
import logging
from config import LOG_FILE

# إعداد نظام التسجيل (Logging)
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    encoding='utf-8')

def run_command(command):
    """
    دالة لتنفيذ أمر خارجي وإرجاع المخرجات.
    تستخدم لتشغيل أدوات مثل nmap, sqlmap, etc.
    """
    try:
        # تسجيل الأمر الذي سيتم تنفيذه
        logging.info(f"Executing command: {' '.join(command)}")
        
        # تنفيذ الأمر باستخدام subprocess
        # capture_output=True لالتقاط المخرجات القياسية والخطأ القياسي
        # text=True لجعل المخرجات كنص (string) بدلاً من بايتات
        # check=True لرفع استثناء (exception) إذا فشل الأمر
        result = subprocess.run(command, capture_output=True, text=True, check=True, encoding='utf-8')
        
        # تسجيل المخرجات القياسية
        logging.info(f"Command output: {result.stdout}")
        
        # إرجاع المخرجات القياسية
        return result.stdout
    except FileNotFoundError as e:
        # في حال لم يتم العثور على الأداة (مثل nmap)
        error_message = f"خطأ: لم يتم العثور على الأمر '{command[0]}'. تأكد من أنه مثبت وموجود في PATH."
        logging.error(error_message)
        return error_message
    except subprocess.CalledProcessError as e:
        # في حال فشل الأمر (أرجع رمز خروج غير صفري)
        error_message = f"خطأ أثناء تنفيذ الأمر: {' '.join(command)}\nالخطأ: {e.stderr}"
        logging.error(error_message)
        return error_message
    except Exception as e:
        # لأي استثناءات أخرى
        error_message = f"حدث خطأ غير متوقع: {e}"
        logging.error(error_message)
        return error_message

def log_message(message, level='info'):
    """
    دالة لتسجيل الرسائل في ملف السجل.
    """
    if level == 'info':
        logging.info(message)
    elif level == 'warning':
        logging.warning(message)
    elif level == 'error':
        logging.error(message)
    elif level == 'debug':
        logging.debug(message)


