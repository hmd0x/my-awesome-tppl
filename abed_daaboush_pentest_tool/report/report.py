# report.py
# هذا الملف يحتوي على وظائف توليد التقارير.

import os
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_RIGHT, TA_CENTER

from config import REPORT_DIR, REPORT_TITLE, DEVELOPER_NAME, TOOL_NAME, VERSION

class PentestReportGenerator:
    """
    فئة لتوليد تقارير اختبار الاختراق بصيغة PDF.
    """
    
    def __init__(self):
        """
        إعداد مولد التقارير.
        """
        # إنشاء مجلد التقارير إذا لم يكن موجوداً
        if not os.path.exists(REPORT_DIR):
            os.makedirs(REPORT_DIR)
            
        # تسجيل خط عربي (إذا كان متوفراً)
        try:
            # يمكنك تحميل خط عربي مثل Arial Unicode MS أو Tahoma
            # هنا نستخدم خط افتراضي
            pass
        except:
            pass
            
    def create_report(self, scan_results):
        """
        إنشاء تقرير PDF شامل لنتائج الفحص.
        
        Args:
            scan_results (dict): قاموس يحتوي على نتائج جميع أنواع الفحص
        """
        # إنشاء اسم ملف التقرير مع الطابع الزمني
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"pentest_report_{timestamp}.pdf"
        filepath = os.path.join(REPORT_DIR, filename)
        
        # إنشاء مستند PDF
        doc = SimpleDocTemplate(filepath, pagesize=A4)
        story = []
        
        # إعداد الأنماط
        styles = getSampleStyleSheet()
        
        # نمط للعناوين الرئيسية
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.darkblue
        )
        
        # نمط للعناوين الفرعية
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            alignment=TA_RIGHT,
            textColor=colors.darkgreen
        )
        
        # نمط للنص العادي
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=6,
            alignment=TA_RIGHT
        )
        
        # إضافة العنوان الرئيسي
        story.append(Paragraph(REPORT_TITLE, title_style))
        story.append(Spacer(1, 12))
        
        # إضافة معلومات التقرير
        info_data = [
            ["تاريخ التقرير:", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
            ["اسم الأداة:", TOOL_NAME],
            ["الإصدار:", VERSION],
            ["المطور:", DEVELOPER_NAME]
        ]
        
        info_table = Table(info_data, colWidths=[2*inch, 3*inch])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'RIGHT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(info_table)
        story.append(Spacer(1, 20))
        
        # إضافة ملخص تنفيذي
        story.append(Paragraph("الملخص التنفيذي", heading_style))
        summary_text = "تم تنفيذ اختبار اختراق شامل باستخدام عدة أدوات متخصصة لتقييم الأمان الشامل للهدف المحدد."
        story.append(Paragraph(summary_text, normal_style))
        story.append(Spacer(1, 12))
        
        # إضافة نتائج كل نوع فحص
        if 'sql_injection' in scan_results:
            story.append(Paragraph("نتائج فحص SQL Injection", heading_style))
            story.append(Paragraph(scan_results['sql_injection'], normal_style))
            story.append(Spacer(1, 12))
            
        if 'network_scan' in scan_results:
            story.append(Paragraph("نتائج فحص الشبكة", heading_style))
            story.append(Paragraph(scan_results['network_scan'], normal_style))
            story.append(Spacer(1, 12))
            
        if 'web_scan' in scan_results:
            story.append(Paragraph("نتائج فحص الويب", heading_style))
            story.append(Paragraph(scan_results['web_scan'], normal_style))
            story.append(Spacer(1, 12))
            
        if 'dns_info' in scan_results:
            story.append(Paragraph("معلومات DNS", heading_style))
            story.append(Paragraph(scan_results['dns_info'], normal_style))
            story.append(Spacer(1, 12))
            
        if 'ip_info' in scan_results:
            story.append(Paragraph("معلومات IP", heading_style))
            story.append(Paragraph(scan_results['ip_info'], normal_style))
            story.append(Spacer(1, 12))
            
        if 'brute_force' in scan_results:
            story.append(Paragraph("نتائج هجوم Brute Force", heading_style))
            story.append(Paragraph(scan_results['brute_force'], normal_style))
            story.append(Spacer(1, 12))
            
        # إضافة التوصيات
        story.append(Paragraph("التوصيات", heading_style))
        recommendations = [
            "1. تحديث جميع البرامج والأنظمة بانتظام",
            "2. استخدام كلمات مرور قوية ومعقدة",
            "3. تفعيل المصادقة الثنائية حيثما أمكن",
            "4. مراقبة الشبكة بانتظام للكشف عن الأنشطة المشبوهة",
            "5. تدريب الموظفين على أفضل ممارسات الأمان السيبراني"
        ]
        
        for rec in recommendations:
            story.append(Paragraph(rec, normal_style))
            
        story.append(Spacer(1, 20))
        
        # إضافة تذييل
        footer_text = f"تم إنشاء هذا التقرير بواسطة {TOOL_NAME} - {DEVELOPER_NAME}"
        story.append(Paragraph(footer_text, normal_style))
        
        # بناء المستند
        doc.build(story)
        
        return filepath
        
    def create_summary_report(self, scan_count, vulnerabilities_found):
        """
        إنشاء تقرير ملخص سريع.
        
        Args:
            scan_count (int): عدد عمليات الفحص المنفذة
            vulnerabilities_found (int): عدد الثغرات المكتشفة
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"summary_report_{timestamp}.pdf"
        filepath = os.path.join(REPORT_DIR, filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4)
        story = []
        
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'SummaryTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=20,
            alignment=TA_CENTER
        )
        
        # العنوان
        story.append(Paragraph("تقرير ملخص اختبار الاختراق", title_style))
        story.append(Spacer(1, 12))
        
        # الإحصائيات
        stats_data = [
            ["عدد عمليات الفحص:", str(scan_count)],
            ["عدد الثغرات المكتشفة:", str(vulnerabilities_found)],
            ["تاريخ التقرير:", datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
        ]
        
        stats_table = Table(stats_data, colWidths=[2*inch, 2*inch])
        stats_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'RIGHT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(stats_table)
        
        doc.build(story)
        return filepath

